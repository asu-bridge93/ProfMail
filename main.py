import os
import pickle
import json
import sqlite3
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from dotenv import load_dotenv

# FastAPI
from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import HTMLResponse, JSONResponse
import uvicorn

# Gmail API
from google.auth.transport.requests import Request as GoogleRequest
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

# OpenAI API
from openai import OpenAI

# „Çπ„Ç±„Ç∏„É•„Éº„É©„Éº
from apscheduler.schedulers.background import BackgroundScheduler

# Áí∞Â¢ÉÂ§âÊï∞Ë™≠„ÅøËæº„Åø
load_dotenv()

# Gmail API„ÅÆ„Çπ„Ç≥„Éº„Éó
SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

class ProfessorEmailDatabase:
    def __init__(self, db_path: str = "professor_emails.db"):
        """ÊïôÊéàÂêë„Åë„É°„Éº„É´„Éá„Éº„Çø„Éô„Éº„Çπ"""
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """„Éá„Éº„Çø„Éô„Éº„Çπ„Éª„ÉÜ„Éº„Éñ„É´‰ΩúÊàê"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # „É°„Éº„É´„ÉÜ„Éº„Éñ„É´
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS emails (
                id TEXT PRIMARY KEY,
                subject TEXT NOT NULL,
                sender TEXT NOT NULL,
                sender_email TEXT NOT NULL,
                date TEXT NOT NULL,
                body TEXT NOT NULL,
                category TEXT NOT NULL,
                priority TEXT NOT NULL,
                urgency_score INTEGER DEFAULT 0,
                gmail_link TEXT,
                reply_draft TEXT,
                status TEXT DEFAULT 'pending',
                completed_at DATETIME NULL,
                processed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Âá¶ÁêÜÂ±•Ê≠¥„ÉÜ„Éº„Éñ„É´
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS processing_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                execution_time DATETIME DEFAULT CURRENT_TIMESTAMP,
                emails_processed INTEGER,
                emails_categorized INTEGER,
                status TEXT,
                error_message TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ ÊïôÊéàÂêë„Åë„Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñÂÆå‰∫Ü")
    
    def save_email(self, email_data: Dict[str, Any]) -> bool:
        """„É°„Éº„É´ÊÉÖÂ†±„Çí‰øùÂ≠ò"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Ë§áÊï∞„ÅÆGmail„É™„É≥„ÇØÂΩ¢Âºè„ÇíË©¶„Åô
            email_id = email_data['id']
            gmail_links = [
                f"https://mail.google.com/mail/u/0/#all/{email_id}",  # ÂÖ®„É°„Éº„É´„Åã„ÇâÊ§úÁ¥¢
                f"https://mail.google.com/mail/u/0/#inbox/{email_id}",  # Âèó‰ø°„Éà„É¨„Ç§
                f"https://mail.google.com/mail/u/0/?shva=1#search/rfc822msgid%3A{email_id}"  # RFC822 IDÊ§úÁ¥¢
            ]
            
            # ÊúÄÂàù„ÅÆ„É™„É≥„ÇØ„Çí‰ΩøÁî®Ôºàall „ÅåÊúÄ„ÇÇÁ¢∫ÂÆüÔºâ
            gmail_link = gmail_links[0]
            
            cursor.execute('''
                INSERT OR REPLACE INTO emails 
                (id, subject, sender, sender_email, date, body, category, priority, urgency_score, gmail_link, reply_draft, status, processed_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                email_data['id'],
                email_data['subject'],
                email_data['sender'],
                email_data['sender_email'],
                email_data['date'],
                email_data['body'],
                email_data['category'],
                email_data['priority'],
                email_data['urgency_score'],
                gmail_link,
                email_data['reply_draft'],
                'pending',
                datetime.now()
            ))
            
            conn.commit()
            conn.close()
            return True
            
        except Exception as e:
            print(f"‚ùå „É°„Éº„É´‰øùÂ≠ò„Ç®„É©„Éº: {e}")
            return False
    
    def get_emails_by_priority(self, priority: str, status: str = 'pending', limit: int = 20) -> List[Dict[str, Any]]:
        """ÂÑ™ÂÖàÂ∫¶Âà•„É°„Éº„É´ÂèñÂæó"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT * FROM emails 
                WHERE priority = ? AND status = ?
                ORDER BY urgency_score DESC, processed_at DESC
                LIMIT ?
            ''', (priority, status, limit))
            
            emails = [dict(row) for row in cursor.fetchall()]
            
            # „Éá„Éê„ÉÉ„Ç∞: „Éá„Éº„ÇøÊßãÈÄ†Á¢∫Ë™ç
            if emails:
                print(f"üìß ÂÑ™ÂÖàÂ∫¶„Éï„Ç£„É´„Çø„Éº: {priority} - {len(emails)}‰ª∂ÂèñÂæó")
            
            conn.close()
            return emails
            
        except Exception as e:
            print(f"‚ùå ÂÑ™ÂÖàÂ∫¶Âà•„É°„Éº„É´ÂèñÂæó„Ç®„É©„Éº: {e}")
            return []

    def get_emails_by_category(self, category: str = None, status: str = 'pending', limit: int = 20) -> List[Dict[str, Any]]:
        """„Ç´„ÉÜ„Ç¥„É™Âà•„É°„Éº„É´ÂèñÂæó"""
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            if category:
                cursor.execute('''
                    SELECT * FROM emails 
                    WHERE category = ? AND status = ?
                    ORDER BY urgency_score DESC, processed_at DESC
                    LIMIT ?
                ''', (category, status, limit))
            else:
                cursor.execute('''
                    SELECT * FROM emails 
                    WHERE status = ?
                    ORDER BY urgency_score DESC, processed_at DESC
                    LIMIT ?
                ''', (status, limit))
            
            emails = [dict(row) for row in cursor.fetchall()]
            
            # „Éá„Éê„ÉÉ„Ç∞: „Éá„Éº„ÇøÊßãÈÄ†Á¢∫Ë™ç
            if emails:
                print(f"üìß „Éá„Éê„ÉÉ„Ç∞: „É°„Éº„É´„Éá„Éº„Çø„ÅÆ„Ç≠„Éº = {list(emails[0].keys())}")
                print(f"üìß „Éá„Éê„ÉÉ„Ç∞: „Çµ„É≥„Éó„É´„É°„Éº„É´ = {emails[0]}")
            
            conn.close()
            return emails
            
        except Exception as e:
            print(f"‚ùå „É°„Éº„É´ÂèñÂæó„Ç®„É©„Éº: {e}")
            return []
    
    def update_email_status(self, email_id: str, status: str) -> bool:
        """„É°„Éº„É´„Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            if status == 'completed':
                # ÂÆå‰∫ÜÊôÇ„ÅØÂÆå‰∫ÜÊó•ÊôÇ„ÇÇË®òÈå≤
                cursor.execute('''
                    UPDATE emails 
                    SET status = ?, completed_at = ?
                    WHERE id = ?
                ''', (status, datetime.now().isoformat(), email_id))
            else:
                cursor.execute('''
                    UPDATE emails 
                    SET status = ?
                    WHERE id = ?
                ''', (status, email_id))
            
            updated = cursor.rowcount > 0
            conn.commit()
            conn.close()
            return updated
            
        except Exception as e:
            print(f"‚ùå „É°„Éº„É´„Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞„Ç®„É©„Éº: {e}")
            return False
    
    def delete_email(self, email_id: str) -> bool:
        """„É°„Éº„É´ÂâäÈô§"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('DELETE FROM emails WHERE id = ?', (email_id,))
            
            deleted = cursor.rowcount > 0
            conn.commit()
            conn.close()
            return deleted
            
        except Exception as e:
            print(f"‚ùå „É°„Éº„É´ÂâäÈô§„Ç®„É©„Éº: {e}")
            return False
    
    def get_statistics(self) -> Dict[str, Any]:
        """Áµ±Ë®àÊÉÖÂ†±ÂèñÂæó"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # Âü∫Êú¨Áµ±Ë®à
            cursor.execute('SELECT COUNT(*) FROM emails WHERE status = "pending"')
            pending_emails = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM emails WHERE status = "completed"')
            completed_emails = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM emails WHERE status = "deleted"')
            deleted_emails = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM emails')
            total_emails = cursor.fetchone()[0]
            
            # „Ç´„ÉÜ„Ç¥„É™Âà•Áµ±Ë®à
            cursor.execute('''
                SELECT category, COUNT(*) 
                FROM emails WHERE status = 'pending'
                GROUP BY category
            ''')
            category_stats = dict(cursor.fetchall())
            
            # ÂÑ™ÂÖàÂ∫¶Âà•Áµ±Ë®à
            cursor.execute('''
                SELECT priority, COUNT(*) 
                FROM emails WHERE status = 'pending'
                GROUP BY priority
            ''')
            priority_stats = dict(cursor.fetchall())
            
            conn.close()
            
            return {
                'pending_emails': pending_emails,
                'completed_emails': completed_emails,
                'deleted_emails': deleted_emails,
                'total_emails': total_emails,
                'category_stats': category_stats,
                'priority_stats': priority_stats
            }
            
        except Exception as e:
            print(f"‚ùå Áµ±Ë®àÊÉÖÂ†±ÂèñÂæó„Ç®„É©„Éº: {e}")
            return {}

class ProfessorEmailBot:
    def __init__(self):
        """ÊïôÊéàÂêë„ÅëGmail BotÂàùÊúüÂåñ"""
        self.gmail_service = None
        self.openai_client = None
        self.scheduler = None
        self.db = ProfessorEmailDatabase()
        self.last_execution = None
        self.last_tasks = []  # ËøΩÂä†: ÊúÄÊñ∞„Çø„Çπ„ÇØ„É™„Çπ„Éà
        self.setup_clients()
        self.setup_scheduler()
    
    def setup_clients(self):
        """ÂêÑAPI„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆÂàùÊúüÂåñ"""
        try:
            # Gmail API
            self.gmail_service = self.authenticate_gmail()
            print("‚úÖ Gmail API ÂàùÊúüÂåñÂÆå‰∫Ü")
            
            # OpenAI API
            openai_key = os.getenv('OPENAI_API_KEY')
            if openai_key:
                self.openai_client = OpenAI(api_key=openai_key)
                print("‚úÖ OpenAI API ÂàùÊúüÂåñÂÆå‰∫Ü")
                
        except Exception as e:
            print(f"‚ùå ÂàùÊúüÂåñ„Ç®„É©„Éº: {e}")
    
    def authenticate_gmail(self):
        """Gmail APIË™çË®º"""
        creds = None
        
        if os.path.exists('token.pickle'):
            with open('token.pickle', 'rb') as token:
                creds = pickle.load(token)
        
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(GoogleRequest())
            else:
                flow = InstalledAppFlow.from_client_secrets_file(
                    'credentials.json', SCOPES)
                creds = flow.run_local_server(port=0)
            
            with open('token.pickle', 'wb') as token:
                pickle.dump(creds, token)
        
        return build('gmail', 'v1', credentials=creds)
    
    def get_email_body(self, message):
        """„É°„Éº„É´Êú¨Êñá„ÇíÂèñÂæó"""
        try:
            payload = message['payload']
            body = ""
            
            if 'parts' in payload:
                for part in payload['parts']:
                    if part['mimeType'] == 'text/plain':
                        data = part['body']['data']
                        body = self.decode_base64(data)
                        break
                    elif part['mimeType'] == 'text/html':
                        if not body:
                            data = part['body']['data']
                            body = self.decode_base64(data)
            else:
                if payload['mimeType'] == 'text/plain':
                    data = payload['body']['data']
                    body = self.decode_base64(data)
            
            return body[:3000]  # ÊïôÊéà„É°„Éº„É´„ÅØÈï∑„ÇÅ„Å´ÂèñÂæó
            
        except Exception as e:
            print(f"‚ö†Ô∏è  „É°„Éº„É´Êú¨ÊñáÂèñÂæó„Ç®„É©„Éº: {e}")
            return ""
    
    def decode_base64(self, data):
        """Base64„Éá„Ç≥„Éº„Éâ"""
        import base64
        try:
            return base64.urlsafe_b64decode(data).decode('utf-8')
        except:
            return ""
    
    def extract_sender_email(self, sender_full):
        """ÈÄÅ‰ø°ËÄÖ„É°„Éº„É´„Ç¢„Éâ„É¨„ÇπÊäΩÂá∫"""
        import re
        match = re.search(r'<(.+?)>', sender_full)
        if match:
            return match.group(1)
        elif '@' in sender_full:
            return sender_full
        else:
            return "unknown@unknown.com"
    
    def categorize_and_analyze_email(self, email_content: str, subject: str, sender: str) -> Dict[str, Any]:
        """„É°„Éº„É´„ÅÆ„Ç´„ÉÜ„Ç¥„É™ÂàÜÈ°û„ÉªÂàÜÊûê„ÉªËøî‰ø°ËçâÊ°àÁîüÊàê"""
        try:
            prompt = f"""Â§ßÂ≠¶ÊïôÊéà„ÅÆ„É°„Éº„É´ÂØæÂøú„ÇíÂäπÁéáÂåñ„Åô„Çã„Åü„ÇÅ„ÄÅ‰ª•‰∏ã„ÅÆ„É°„Éº„É´„ÇíÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

‰ª∂Âêç: {subject}
ÈÄÅ‰ø°ËÄÖ: {sender}
ÂÜÖÂÆπ: {email_content}

‰ª•‰∏ã„ÅÆJSONÂΩ¢Âºè„ÅÆ„Åø„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Ç≥„Éº„Éâ„Éñ„É≠„ÉÉ„ÇØ„ÅØ‰ΩøÁî®„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑÔºâÔºö

{{
  "category": "„Ç´„ÉÜ„Ç¥„É™Âêç",
  "priority": "È´ò/‰∏≠/‰Ωé",
  "urgency_score": 1-10„ÅÆÊï∞ÂÄ§,
  "summary": "„É°„Éº„É´ÂÜÖÂÆπ„ÅÆË¶ÅÁ¥ÑÔºà1Ë°åÔºâ",
  "reply_draft": "Ëøî‰ø°ËçâÊ°àÔºà„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥ÂΩ¢Âºè„ÅßË®òËø∞Ôºâ",
  "is_actionable": true/false
}}

„Ç´„ÉÜ„Ç¥„É™ÂÆöÁæ©Ôºö
- "Â≠¶ÁîüË≥™Âïè": Â≠¶Áîü„Åã„Çâ„ÅÆÊéàÊ•≠„ÉªÁ†îÁ©∂„Å´Èñ¢„Åô„ÇãË≥™Âïè
- "Á†îÁ©∂ÂÆ§ÈÅãÂñ∂": Á†îÁ©∂ÂÆ§„É°„É≥„Éê„Éº„Å®„ÅÆÈÄ£Áµ°„ÄÅÊåáÂ∞éÈñ¢ÈÄ£
- "ÂÖ±ÂêåÁ†îÁ©∂": ‰ªñ„ÅÆÁ†îÁ©∂ËÄÖ„Å®„ÅÆÂÖ±ÂêåÁ†îÁ©∂„Å´Èñ¢„Åô„ÇãÈÄ£Áµ°
- "Ë´ñÊñáÊüªË™≠": Ë´ñÊñáÂØ©Êüª„ÄÅÊüªË™≠‰æùÈ†º
- "‰ºöË≠∞Ë™øÊï¥": ‰ºöË≠∞„ÉªÊâì„Å°Âêà„Çè„Åõ„ÅÆÊó•Á®ãË™øÊï¥
- "‰∫ãÂãôÈÄ£Áµ°": Â§ßÂ≠¶‰∫ãÂãô„Åã„Çâ„ÅÆÈÄ£Áµ°„ÄÅÊâãÁ∂ö„ÅçÈñ¢ÈÄ£
- "Â≠¶‰ºö„Ç§„Éô„É≥„Éà": Â≠¶‰ºö„ÄÅ„Çª„Éü„Éä„Éº„ÄÅ„Ç§„Éô„É≥„Éà„ÅÆÊ°àÂÜÖ
- "‰∏çË¶Å„É°„Éº„É´": Â∫ÉÂëä„ÄÅ„Çπ„Éë„É†„ÄÅÊòé„Çâ„Åã„Å´‰∏çË¶Å„Å™„É°„Éº„É´„ÄÅÊ±Ç‰∫∫ÊÉÖÂ†±„ÄÅËá™ÂãïÈÄÅ‰ø°„É°„Éº„É´

Ëøî‰ø°ËçâÊ°à‰ΩúÊàê„É´„Éº„É´Ôºö
- **„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥ÂΩ¢Âºè**„ÅßË®òËø∞„Åó„Å¶„Åè„Å†„Åï„ÅÑ
- ÊïôÊéà„Å®„Åó„Å¶ÈÅ©Âàá„Å™Êï¨Ë™û„Éª‰∏ÅÂØßË™û„Çí‰ΩøÁî®
- Â≠¶Áîü„Å´„ÅØÊïôËÇ≤ÁöÑ„ÅßË¶™Âàá„Å´
- Á†îÁ©∂ËÄÖ„Å´„ÅØÂ∞ÇÈñÄÁöÑ„ÅßÁ∞°ÊΩî„Å´
- ‰∫ãÂãôÁöÑ„Å™ÂÜÖÂÆπ„ÅØÁ¢∫Ë™ç„ÉªÊâøË´æ„É°„Ç§„É≥

urgency_scoreÊé°ÁÇπÂü∫Ê∫ñÔºö
9-10: Á∑äÊÄ•ÂØæÂøúÂøÖË¶ÅÔºàÂ≠¶Áîü„ÅÆÂõ∞„Çä„Åî„Å®„ÄÅÈáçË¶Å„Å™Á∑†ÂàáÁ≠âÔºâ
7-8: Êó©ÊÄ•ÂØæÂøúÂøÖË¶ÅÔºà‰ºöË≠∞Ë™øÊï¥„ÄÅÊüªË™≠ÊúüÈôêÁ≠âÔºâ
5-6: ÈÄöÂ∏∏ÂØæÂøúÔºà‰∏ÄËà¨ÁöÑ„Å™Ë≥™Âïè„ÄÅÈÄ£Áµ°Á≠âÔºâ
3-4: ‰ΩéÂÑ™ÂÖàÂ∫¶ÔºàÊ°àÂÜÖ„ÄÅÊÉÖÂ†±ÂÖ±ÊúâÁ≠âÔºâ
1-2: ÂØæÂøú‰∏çË¶ÅÔºàÂ∫ÉÂëä„ÄÅ‰∏çË¶Å„É°„Éº„É´Á≠âÔºâ

ÈáçË¶Å: JSON„ÅÆ„Åø„ÇíÂá∫Âäõ„Åó„ÄÅ```json „ÇÑ ``` „Å™„Å©„ÅÆ„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥Ë®òÊ≥ï„ÅØÁµ∂ÂØæ„Å´‰ΩøÁî®„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ"""

            response = self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "„ÅÇ„Å™„Åü„ÅØÂ§ßÂ≠¶ÊïôÊéà„ÅÆÂÑ™ÁßÄ„Å™„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß„Åô„ÄÇÂøÖ„ÅöJSONÂΩ¢Âºè„ÅÆ„Åø„ÅßÂõûÁ≠î„Åó„ÄÅ„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Ç≥„Éº„Éâ„Éñ„É≠„ÉÉ„ÇØ„ÅØ‰ΩøÁî®„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ"},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.1,
                max_tokens=1500
            )
            
            result = response.choices[0].message.content.strip()
            
            # „Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Ç≥„Éº„Éâ„Éñ„É≠„ÉÉ„ÇØ„ÇíÈô§Âéª
            if result.startswith('```json'):
                result = result[7:]  # ```json „ÇíÈô§Âéª
            if result.startswith('```'):
                result = result[3:]   # ``` „ÇíÈô§Âéª
            if result.endswith('```'):
                result = result[:-3]  # Êú´Â∞æ„ÅÆ ``` „ÇíÈô§Âéª
            
            result = result.strip()
            
            try:
                analysis = json.loads(result)
                
                # ‰∏çË¶Å„É°„Éº„É´„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
                if analysis.get('category') == '‰∏çË¶Å„É°„Éº„É´' or analysis.get('urgency_score', 0) <= 2:
                    print(f"   üóëÔ∏è ‰∏çË¶Å„É°„Éº„É´Èô§Â§ñ: {subject[:30]}...")
                    return None
                
                return analysis
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è  JSONËß£Êûê„Ç®„É©„Éº: {e}")
                print(f"   ÂéüÊñá: {result[:100]}...")
                return None
                
        except Exception as e:
            print(f"‚ùå OpenAI API„Ç®„É©„Éº: {e}")
            return None
    
    def get_recent_emails(self, days=3, max_emails=30):
        """Áõ¥Ëøë„ÅÆ„É°„Éº„É´„ÇíÂèñÂæó"""
        try:
            # „Çà„ÇäÂé≥ÂØÜ„Å™„Éï„Ç£„É´„Çø„É™„É≥„Ç∞ÔºàÂèó‰ø°„Éà„É¨„Ç§„ÅÆ„Åø„ÄÅnoreplyÈô§Â§ñÔºâ
            date_filter = (datetime.now() - timedelta(days=days)).strftime('%Y/%m/%d')
            query = f'in:inbox after:{date_filter} -from:noreply -from:no-reply -from:donotreply -is:sent'
            
            print(f"üîç GmailÊ§úÁ¥¢„ÇØ„Ç®„É™: {query}")
            
            results = self.gmail_service.users().messages().list(
                userId='me', 
                q=query, 
                maxResults=max_emails
            ).execute()
            
            messages = results.get('messages', [])
            print(f"üì¨ Áõ¥Ëøë{days}Êó•Èñì„ÅÆ„É°„Éº„É´: {len(messages)}‰ª∂ÂèñÂæó")
            
            email_data = []
            for msg in messages:
                message = self.gmail_service.users().messages().get(
                    userId='me', 
                    id=msg['id'],
                    format='full'
                ).execute()
                
                headers = message['payload'].get('headers', [])
                subject = next((h['value'] for h in headers if h['name'] == 'Subject'), 'No Subject')
                sender = next((h['value'] for h in headers if h['name'] == 'From'), 'Unknown')
                date = next((h['value'] for h in headers if h['name'] == 'Date'), 'Unknown')
                
                # „Éá„Éê„ÉÉ„Ç∞: ÂèñÂæó„Åó„Åü„É°„Éº„É´ÊÉÖÂ†±„ÇíË°®Á§∫
                print(f"   üìß {subject[:40]}... - {sender[:30]}...")
                
                body = self.get_email_body(message)
                sender_email = self.extract_sender_email(sender)
                
                email_info = {
                    'id': msg['id'],
                    'subject': subject,
                    'sender': sender,
                    'sender_email': sender_email,
                    'date': date,
                    'body': body
                }
                email_data.append(email_info)
            
            return email_data
            
        except Exception as error:
            print(f"‚ùå „É°„Éº„É´ÂèñÂæó„Ç®„É©„Éº: {error}")
            return []
    
    def process_emails(self, days=3):
        """„É°„Éº„É´Âá¶ÁêÜ„ÉªÂàÜÊûê„ÉªÂàÜÈ°û"""
        print(f"üîÑ ÊïôÊéà„É°„Éº„É´Âá¶ÁêÜÈñãÂßãÔºàÁõ¥Ëøë{days}Êó•ÈñìÔºâ...")
        
        emails = self.get_recent_emails(days=days)
        
        if not emails:
            print("üì≠ Êñ∞ÁùÄ„É°„Éº„É´„Å™„Åó")
            return []
        
        processed_emails = []
        categorized_count = 0
        skipped_count = 0
        
        for email in emails:
            # AIÂàÜÊûê„ÉªÂàÜÈ°û„ÉªËøî‰ø°ËçâÊ°àÁîüÊàê
            analysis = self.categorize_and_analyze_email(
                email['body'], 
                email['subject'], 
                email['sender']
            )
            
            if analysis and analysis.get('is_actionable', True):
                email_record = {
                    'id': email['id'],
                    'subject': email['subject'],
                    'sender': email['sender'],
                    'sender_email': email['sender_email'],
                    'date': email['date'],
                    'body': email['body'],
                    'category': analysis.get('category', '„Åù„ÅÆ‰ªñ'),
                    'priority': analysis.get('priority', '‰∏≠'),
                    'urgency_score': analysis.get('urgency_score', 5),
                    'reply_draft': analysis.get('reply_draft', ''),
                    'summary': analysis.get('summary', '')
                }
                
                # DB„Å´‰øùÂ≠ò
                if self.db.save_email(email_record):
                    processed_emails.append(email_record)
                    categorized_count += 1
                    print(f"   ‚úÖ {analysis.get('category')} - {email['subject'][:40]}...")
                else:
                    print(f"   ‚ùå DB‰øùÂ≠òÂ§±Êïó - {email['subject'][:40]}...")
            else:
                skipped_count += 1
                if analysis:
                    print(f"   üóëÔ∏è „Çπ„Ç≠„ÉÉ„Éó({analysis.get('category', '‰∏çÊòé')}) - {email['subject'][:40]}...")
                else:
                    print(f"   ‚ö†Ô∏è ÂàÜÊûêÂ§±Êïó - {email['subject'][:40]}...")
        
        print(f"‚úÖ „É°„Éº„É´Âá¶ÁêÜÂÆå‰∫Ü: {categorized_count}‰ª∂„ÇíÂàÜÈ°û„Éª‰øùÂ≠ò, {skipped_count}‰ª∂„Çí„Çπ„Ç≠„ÉÉ„Éó")
        return processed_emails
    
    def run_daily_processing(self):
        """Êó•Ê¨°„É°„Éº„É´Âá¶ÁêÜÂÆüË°å"""
        print("üéì ÊïôÊéà„É°„Éº„É´„Ç¢„Ç∑„Çπ„Çø„É≥„ÉàÂÆüË°åÈñãÂßã...")
        
        try:
            processed_emails = self.process_emails(days=3)
            
            self.last_execution = datetime.now()
            self.last_tasks = processed_emails  # ÂÆüË°åÁµêÊûú„Çí‰øùÂ≠ò
            
            print("üéâ ÊïôÊéà„É°„Éº„É´„Ç¢„Ç∑„Çπ„Çø„É≥„ÉàÂÆüË°åÂÆå‰∫ÜÔºÅ")
            return processed_emails
            
        except Exception as e:
            print(f"‚ùå ÂÆüË°å„Ç®„É©„Éº: {e}")
            self.last_tasks = []  # „Ç®„É©„ÉºÊôÇ„ÅØÁ©∫„É™„Çπ„Éà
            return []
    
    def setup_scheduler(self):
        """„Çπ„Ç±„Ç∏„É•„Éº„É©„ÉºË®≠ÂÆö"""
        self.scheduler = BackgroundScheduler()
        
        # ÊØéÊó•Êúù8ÊôÇ„Å´ÂÆüË°åÔºàÊïôÊéà„ÅåÂá∫Âã§ÂâçÔºâ
        self.scheduler.add_job(
            self.run_daily_processing,
            'cron',
            hour=8,
            minute=0,
            id='daily_email_processing'
        )
        
        self.scheduler.start()
        print("‚è∞ „Çπ„Ç±„Ç∏„É•„Éº„É©„ÉºÈñãÂßã: ÊØéÊó• 08:00 „Å´Ëá™ÂãïÂÆüË°å")

# FastAPI „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥
app = FastAPI(
    title="ProfMail",
    description="Â§ßÂ≠¶ÊïôÊéàÂêë„Åë„É°„Éº„É´ÁÆ°ÁêÜ„ÉªËøî‰ø°ÊîØÊè¥„Ç∑„Çπ„ÉÜ„É†",
    version="3.0.0"
)

# „Éú„ÉÉ„Éà„Ç§„É≥„Çπ„Çø„É≥„Çπ
bot = ProfessorEmailBot()

def _generate_email_cards(emails):
    """„É°„Éº„É´„Ç´„Éº„ÉâÁîüÊàê„Éò„É´„Éë„ÉºÈñ¢Êï∞"""
    if not emails:
        return '<div class="email-card"><div class="email-header"><p>üì≠ „Åì„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Å´„ÅØ„É°„Éº„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p></div></div>'
    
    cards = []
    for email in emails:
        reply_section = ""
        reply_draft = email.get("reply_draft", "")
        email_id = email.get("id", "")
        if reply_draft:
            # „Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„ÇíÁ∞°ÊòìHTML„Å´Â§âÊèõÔºàÂü∫Êú¨ÁöÑ„Å™Â§âÊèõ„ÅÆ„ÅøÔºâ
            reply_html = (reply_draft
                .replace('\n### ', '<br><h4>')
                .replace('\n## ', '<br><h3>')
                .replace('\n# ', '<br><h2>')
                .replace('**', '<strong>', 1).replace('**', '</strong>', 1)
                .replace('- ', '<br>‚Ä¢ ')
                .replace('\n', '<br>'))
            
            # HTML„Çø„Ç∞„ÇíÈñâ„Åò„Çã
            reply_html = reply_html.replace('<h4>', '<h4>').replace('<h3>', '<h3>').replace('<h2>', '<h2>')
            
            reply_section = f'''<div class="reply-preview">
                <h5>ü§ñ AIËøî‰ø°ËçâÊ°à</h5>
                <div class="reply-tabs">
                    <button class="tab-btn active" onclick="showReplyTab('{email_id}', 'preview')">üëÅÔ∏è „Éó„É¨„Éì„É•„Éº</button>
                    <button class="tab-btn" onclick="showReplyTab('{email_id}', 'markdown')">üìù Á∑®ÈõÜÂèØËÉΩ</button>
                    <button class="copy-actions copy-btn-quick" onclick="copyToClipboard('{email_id}')">üìã „ÉØ„É≥„ÇØ„É™„ÉÉ„ÇØ„Ç≥„Éî„Éº</button>
                </div>
                <div id="reply-preview-{email_id}" class="reply-content active">
                    <div class="reply-text">{reply_html}</div>
                </div>
                <div id="reply-markdown-{email_id}" class="reply-content">
                    <textarea id="markdown-textarea-{email_id}" class="markdown-text">{reply_draft}</textarea>
                </div>
            </div>'''
        
        sender = email.get("sender", "Unknown")
        sender_display = sender[:60] + "..." if len(sender) > 60 else sender
        
        subject = email.get("subject", "No Subject")
        
        # „É°„Éº„É´Êú¨ÊñáË°®Á§∫„ÅÆÊîπÂñÑ
        summary = email.get("summary", "")
        body = email.get("body", "")
        
        if summary and summary != "„É°„Éº„É´ÂÜÖÂÆπ„ÇíÂàÜÊûê‰∏≠...":
            # AIÂàÜÊûêÊ∏à„Åø„ÅÆÂ†¥Âêà„ÅØsummary„ÇíË°®Á§∫
            content_display = summary
        elif body:
            # AIÂàÜÊûêÂâç„ÅÆÂ†¥Âêà„ÅØ„É°„Éº„É´Êú¨Êñá„ÅÆ„Éó„É¨„Éì„É•„Éº„ÇíË°®Á§∫
            body_preview = body.replace('\n', ' ').replace('\r', ' ').strip()
            content_display = body_preview[:150] + "..." if len(body_preview) > 150 else body_preview
        else:
            content_display = "„É°„Éº„É´ÂÜÖÂÆπ„ÇíÂèñÂæó‰∏≠..."
        
        priority = email.get("priority", "‰∏≠")
        urgency_score = email.get("urgency_score", 5)
        date = email.get("date", "Unknown Date")
        gmail_link = email.get("gmail_link", "#")
        
        card = f'''<div class="email-card">
            <div class="email-header priority-{priority.lower()}">
                <div class="email-subject">{subject}</div>
                <div class="email-meta">
                    From: {sender_display}<br>
                    Date: {date[:25]}<br>
                    Priority: {priority} 
                    <span class="urgency-score">Á∑äÊÄ•Â∫¶: {urgency_score}/10</span>
                </div>
                <div class="email-summary">
                    {content_display}
                </div>
                {reply_section}
            </div>
            
            <div class="email-actions">
                <a href="{gmail_link}" target="_blank" class="btn btn-primary">üìß Gmail„ÅßÈñã„Åè</a>
                <button onclick="markCompleted('{email_id}')" class="btn btn-success">‚úÖ ÂÆå‰∫Ü</button>
                <button onclick="deleteEmail('{email_id}')" class="btn btn-danger">üóëÔ∏è ÂâäÈô§</button>
            </div>
        </div>'''
        cards.append(card)
    
    return ''.join(cards)

def _generate_category_list(categories, stats):
    """„Ç´„ÉÜ„Ç¥„É™„É™„Çπ„ÉàÁîüÊàê„Éò„É´„Éë„ÉºÈñ¢Êï∞"""
    items = []
    for category, icon in categories.items():
        count = stats.get('category_stats', {}).get(category, 0)
        item = f'''<li class="category-item" onclick="viewCategory('{category}')">
            <span class="category-icon">{icon}</span>
            {category}
            <span class="category-count">{count}</span>
        </li>'''
        items.append(item)
    return ''.join(items)

def _generate_completed_email_rows(emails):
    """ÂÆå‰∫Ü„É°„Éº„É´Ë°åÁîüÊàê„Éò„É´„Éë„ÉºÈñ¢Êï∞"""
    if not emails:
        return '<tr><td colspan="5" style="text-align: center; padding: 40px;">üì≠ ÂÆå‰∫ÜÊ∏à„Åø„É°„Éº„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</td></tr>'
    
    rows = []
    for email in emails:
        subject = email.get("subject", "No Subject")
        sender = email.get("sender", "Unknown")
        category = email.get("category", "„Åù„ÅÆ‰ªñ")
        completed_at = email.get("completed_at", "Unknown")
        gmail_link = email.get("gmail_link", "#")
        
        subject_display = subject[:50] + "..." if len(subject) > 50 else subject
        sender_display = sender[:30] + "..." if len(sender) > 30 else sender
        completed_display = completed_at[:19] if completed_at != "Unknown" else "Êú™Ë®òÈå≤"
        
        row = f'''<tr class="completed-item">
            <td><strong>{subject_display}</strong><br>
                <span class="completed-badge">ÂÆå‰∫ÜÊ∏à„Åø</span>
            </td>
            <td>{sender_display}</td>
            <td><span class="category-badge">{category}</span></td>
            <td>{completed_display}</td>
            <td>
                <a href="{gmail_link}" target="_blank" class="btn btn-primary">Gmail</a>
            </td>
        </tr>'''
        rows.append(row)
    
    return ''.join(rows)

def _generate_email_table_rows(emails):
    """„É°„Éº„É´„ÉÜ„Éº„Éñ„É´Ë°åÁîüÊàê„Éò„É´„Éë„ÉºÈñ¢Êï∞"""
    if not emails:
        return '<tr><td colspan="6" style="text-align: center; padding: 40px;">üì≠ „É°„Éº„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</td></tr>'
    
    rows = []
    for email in emails:
        subject = email.get("subject", "No Subject")
        
        # „É°„Éº„É´Êú¨ÊñáË°®Á§∫„ÅÆÊîπÂñÑ
        summary = email.get("summary", "")
        body = email.get("body", "")
        
        if summary and summary != "„É°„Éº„É´ÂÜÖÂÆπ„ÇíÂàÜÊûê‰∏≠...":
            # AIÂàÜÊûêÊ∏à„Åø„ÅÆÂ†¥Âêà„ÅØsummary„ÇíË°®Á§∫
            content_display = summary
        elif body:
            # AIÂàÜÊûêÂâç„ÅÆÂ†¥Âêà„ÅØ„É°„Éº„É´Êú¨Êñá„ÅÆ„Éó„É¨„Éì„É•„Éº„ÇíË°®Á§∫
            body_preview = body.replace('\n', ' ').replace('\r', ' ').strip()
            content_display = body_preview[:100] + "..." if len(body_preview) > 100 else body_preview
        else:
            content_display = "„É°„Éº„É´ÂÜÖÂÆπ„ÇíÂèñÂæó‰∏≠..."
        
        sender = email.get("sender", "Unknown")
        category = email.get("category", "„Åù„ÅÆ‰ªñ")
        priority = email.get("priority", "‰∏≠")
        urgency_score = email.get("urgency_score", 5)
        gmail_link = email.get("gmail_link", "#")
        
        subject_display = subject[:50] + "..." if len(subject) > 50 else subject
        content_display = content_display[:80] + "..." if len(content_display) > 80 else content_display
        sender_display = sender[:30] + "..." if len(sender) > 30 else sender
        
        row = f'''<tr class="priority-{priority.lower()}">
            <td><strong>{subject_display}</strong><br>
                <small>{content_display}</small>
            </td>
            <td>{sender_display}</td>
            <td><span class="category-badge">{category}</span></td>
            <td>{priority}</td>
            <td>{urgency_score}/10</td>
            <td>
                <a href="{gmail_link}" target="_blank" class="btn btn-primary">Gmail</a>
                <button onclick="location.href='/category/{category}'" class="btn btn-success">Ë©≥Á¥∞</button>
            </td>
        </tr>'''
        rows.append(row)
    
    return ''.join(rows)

@app.get("/", response_class=HTMLResponse)
async def dashboard():
    """ÊïôÊéàÂêë„Åë„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ"""
    stats = bot.db.get_statistics()
    
    # „Ç´„ÉÜ„Ç¥„É™ÂÆöÁæ©
    categories = {
        "Â≠¶ÁîüË≥™Âïè": "üìö",
        "Á†îÁ©∂ÂÆ§ÈÅãÂñ∂": "üî¨", 
        "ÂÖ±ÂêåÁ†îÁ©∂": "ü§ù",
        "Ë´ñÊñáÊüªË™≠": "üìÑ",
        "‰ºöË≠∞Ë™øÊï¥": "üìÖ",
        "‰∫ãÂãôÈÄ£Áµ°": "üìã",
        "Â≠¶‰ºö„Ç§„Éô„É≥„Éà": "üì¢"
    }
    
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>ProfMail</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            body {{ 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                margin: 0; 
                padding: 20px; 
                background: linear-gradient(135deg, #e3f2fd 0%, #ffffff 50%, #fff9c4 100%); 
                min-height: 100vh; 
            }}
            .container {{ max-width: 1200px; margin: 0 auto; }}
            .header {{ 
                text-align: center; 
                color: #1565c0; 
                margin-bottom: 30px; 
                background: white;
                padding: 20px;
                border-radius: 15px;
                box-shadow: 0 8px 32px rgba(21, 101, 192, 0.1);
                border: 2px solid #ffd54f;
            }}
            .header h1 {{ 
                font-size: 2.5em; 
                margin-bottom: 10px; 
                background: linear-gradient(45deg, #1565c0, #ffa726);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
            }}
            .header p {{ font-size: 1.2em; opacity: 0.8; color: #1565c0; }}
            .dashboard {{ display: grid; grid-template-columns: 1fr 2fr; gap: 20px; }}
            .sidebar {{ 
                background: white; 
                border-radius: 15px; 
                padding: 20px; 
                box-shadow: 0 8px 32px rgba(21, 101, 192, 0.1);
                border: 1px solid #e3f2fd;
            }}
            .main-content {{ 
                background: white; 
                border-radius: 15px; 
                padding: 20px; 
                box-shadow: 0 8px 32px rgba(21, 101, 192, 0.1);
                border: 1px solid #e3f2fd;
            }}
            .stats-grid {{ display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; margin-bottom: 20px; }}
            .stat-box {{ 
                background: linear-gradient(135deg, #42a5f5 0%, #1976d2 100%); 
                padding: 20px; 
                border-radius: 10px; 
                text-align: center; 
                color: white;
                text-decoration: none;
                transition: transform 0.3s ease;
                border: 2px solid #ffd54f;
            }}
            .stat-box:hover {{ transform: translateY(-3px); }}
            .stat-number {{ font-size: 2em; font-weight: bold; }}
            .stat-label {{ font-size: 0.9em; opacity: 0.9; }}
            .category-list {{ list-style: none; padding: 0; }}
            .category-item {{ 
                background: #f8f9fa; 
                margin: 10px 0; 
                padding: 15px; 
                border-radius: 8px; 
                cursor: pointer; 
                transition: all 0.3s; 
                border-left: 4px solid #1976d2;
                border: 1px solid #e3f2fd;
            }}
            .category-item:hover {{ 
                transform: translateX(5px); 
                box-shadow: 0 4px 12px rgba(21, 101, 192, 0.2);
                background: #e3f2fd;
            }}
            .category-icon {{ font-size: 1.5em; margin-right: 10px; }}
            .category-count {{ 
                float: right; 
                background: #ffa726; 
                color: white; 
                padding: 4px 8px; 
                border-radius: 12px; 
                font-size: 0.8em; 
                font-weight: bold;
            }}
            .action-buttons {{ margin: 20px 0; text-align: center; }}
            .btn {{ 
                background: linear-gradient(135deg, #1976d2 0%, #42a5f5 100%); 
                color: white; 
                padding: 12px 24px; 
                border: none; 
                border-radius: 25px; 
                cursor: pointer; 
                margin: 5px; 
                text-decoration: none; 
                display: inline-block; 
                transition: all 0.3s;
                border: 2px solid #ffd54f;
            }}
            .btn:hover {{ 
                transform: translateY(-2px); 
                box-shadow: 0 4px 12px rgba(21, 101, 192, 0.3);
            }}
            .btn-success {{ 
                background: linear-gradient(135deg, #ffa726 0%, #ffb74d 100%);
                color: #1565c0;
                font-weight: bold;
            }}
            .priority-high {{ border-left-color: #e74c3c; }}
            .priority-medium {{ border-left-color: #ffa726; }}
            .priority-low {{ border-left-color: #66bb6a; }}
            .clickable {{ cursor: pointer; }}
        </style>
        <script>
            async function processEmails() {{
                document.getElementById('process-btn').textContent = 'Âá¶ÁêÜ‰∏≠...';
                document.getElementById('process-btn').disabled = true;
                
                try {{
                    const response = await fetch('/process', {{ method: 'POST' }});
                    const result = await response.json();
                    
                    if (result.success) {{
                        alert(`„É°„Éº„É´Âá¶ÁêÜÂÆå‰∫ÜÔºÅ\\n${{result.processed_count}}‰ª∂„ÅÆ„É°„Éº„É´„ÇíÂàÜÊûê„Åó„Åæ„Åó„Åü„ÄÇ`);
                        location.reload();
                    }} else {{
                        alert('„Ç®„É©„Éº: ' + result.error);
                    }}
                }} catch (error) {{
                    alert('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ' + error.message);
                }}
                
                document.getElementById('process-btn').textContent = 'üì¨ ‰ªä„Åô„ÅêÂá¶ÁêÜ';
                document.getElementById('process-btn').disabled = false;
            }}
            
            function viewCategory(category) {{
                window.location.href = `/category/${{encodeURIComponent(category)}}`;
            }}
        </script>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üéì ProfMail</h1>
                <p>AI powered email management for academics</p>
                <p><small>ÊúÄÁµÇÂá¶ÁêÜ: {bot.last_execution.strftime('%Y-%m-%d %H:%M') if bot.last_execution else 'Êú™ÂÆüË°å'}</small></p>
            </div>
            
            <div class="dashboard">
                <div class="sidebar">
                    <h3 style="color: #1976d2;">Ê¶ÇË¶Å</h3>
                    <div class="stats-grid">
                        <a href="/all" class="stat-box clickable">
                            <div class="stat-number">{stats.get('pending_emails', 0)}</div>
                            <div class="stat-label">Êú™ÂØæÂøú</div>
                        </a>
                        <a href="/completed" class="stat-box clickable">
                            <div class="stat-number">{stats.get('completed_emails', 0)}</div>
                            <div class="stat-label">ÂÆå‰∫ÜÊ∏à„Åø</div>
                        </a>
                        <div class="stat-box" style="background: linear-gradient(135deg, #ffa726 0%, #ffb74d 100%); color: #1565c0;">
                            <div class="stat-number">{stats.get('total_emails', 0)}</div>
                            <div class="stat-label">Á∑è„É°„Éº„É´Êï∞</div>
                        </div>
                    </div>
                    
                    <div class="action-buttons">
                        <button id="process-btn" class="btn btn-success" onclick="processEmails()">ÂÆüË°å</button>
                    </div>

                    <h4 style="color: #1976d2;">ÂÑ™ÂÖàÂ∫¶Âà•ÂàÜÂ∏É</h4>
                    <div style="display: flex; justify-content: space-around; margin: 20px 0;">
                        <a href="/priority/high" style="text-decoration: none; color: inherit;">
                            <div style="text-align: center; padding: 30px; border-radius: 12px; transition: all 0.3s; cursor: pointer; background: #ffebee; border: 2px solid #e74c3c;" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                                <div style="font-size: 2em; color: #e74c3c; font-weight: bold;">{stats.get('priority_stats', {}).get('È´ò', 0)}</div>
                                <div style="color: #e74c3c; font-weight: bold;">È´ò</div>
                            </div>
                        </a>
                        <a href="/priority/medium" style="text-decoration: none; color: inherit;">
                            <div style="text-align: center; padding: 30px; border-radius: 12px; transition: all 0.3s; cursor: pointer; background: #fff8e1; border: 2px solid #ffa726;" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                                <div style="font-size: 2em; color: #ffa726; font-weight: bold;">{stats.get('priority_stats', {}).get('‰∏≠', 0)}</div>
                                <div style="color: #ffa726; font-weight: bold;">‰∏≠</div>
                            </div>
                        </a>
                        <a href="/priority/low" style="text-decoration: none; color: inherit;">
                            <div style="text-align: center; padding: 30px; border-radius: 12px; transition: all 0.3s; cursor: pointer; background: #e8f5e8; border: 2px solid #66bb6a;" onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                                <div style="font-size: 2em; color: #66bb6a; font-weight: bold;">{stats.get('priority_stats', {}).get('‰Ωé', 0)}</div>
                                <div style="color: #66bb6a; font-weight: bold;">‰Ωé</div>
                            </div>
                        </a>
                    </div>
                </div>
                
                <div class="main-content">
                    <h3 style="color: #1976d2;">üìÅ „Ç´„ÉÜ„Ç¥„É™Âà•„É°„Éº„É´</h3>
                    <ul class="category-list">
                        {_generate_category_list(categories, stats)}
                    </ul>
                    
                    
                </div>
            </div>
        </div>
    </body>
    </html>
    """
    return html_content

@app.get("/priority/{priority_level}", response_class=HTMLResponse)
async def priority_view(priority_level: str):
    """ÂÑ™ÂÖàÂ∫¶Âà•„É°„Éº„É´Ë°®Á§∫"""
    priority_map = {"high": "È´ò", "medium": "‰∏≠", "low": "‰Ωé"}
    priority_jp = priority_map.get(priority_level, priority_level)
    
    emails = bot.db.get_emails_by_priority(priority_jp, status='pending', limit=30)
    
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>{priority_jp}ÂÑ™ÂÖàÂ∫¶„É°„Éº„É´ - ProfMail</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            body {{ 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                margin: 0; 
                padding: 20px; 
                background: linear-gradient(135deg, #e3f2fd 0%, #ffffff 50%, #fff9c4 100%);
            }}
            .container {{ max-width: 1000px; margin: 0 auto; }}
            .header {{ 
                background: white; 
                padding: 20px; 
                border-radius: 10px; 
                margin-bottom: 20px; 
                box-shadow: 0 4px 20px rgba(21, 101, 192, 0.1);
                border: 2px solid #ffd54f;
            }}
            .back-btn {{ 
                background: #1976d2; 
                color: white; 
                padding: 8px 16px; 
                border: none; 
                border-radius: 20px; 
                text-decoration: none; 
                margin-right: 10px;
                border: 2px solid #ffd54f;
            }}
            .priority-badge {{ 
                padding: 8px 16px; 
                border-radius: 20px; 
                color: white; 
                font-weight: bold; 
            }}
            .priority-high .priority-badge {{ background: #e74c3c; }}
            .priority-medium .priority-badge {{ background: #ffa726; }}
            .priority-low .priority-badge {{ background: #66bb6a; }}
            .email-card {{ 
                background: white; 
                margin: 15px 0; 
                border-radius: 10px; 
                box-shadow: 0 4px 20px rgba(21, 101, 192, 0.1); 
                overflow: hidden;
                border: 1px solid #e3f2fd;
            }}
            .email-header {{ 
                padding: 20px; 
                border-left: 4px solid #1976d2; 
            }}
            .email-subject {{ 
                font-size: 1.2em; 
                font-weight: bold; 
                margin-bottom: 10px; 
                color: #1565c0; 
            }}
            .email-meta {{ 
                color: #7f8c8d; 
                font-size: 0.9em; 
                margin-bottom: 15px; 
            }}
            .email-summary {{ 
                color: #34495e; 
                margin-bottom: 15px; 
                padding: 10px; 
                background: #e3f2fd; 
                border-radius: 5px; 
            }}
            .email-actions {{ 
                padding: 0 20px 20px 20px; 
            }}
            .btn {{ 
                padding: 8px 16px; 
                margin: 5px; 
                border: none; 
                border-radius: 5px; 
                cursor: pointer; 
                text-decoration: none; 
                display: inline-block; 
            }}
            .btn-primary {{ background: #1976d2; color: white; }}
            .btn-success {{ background: #ffa726; color: white; }}
            .btn-danger {{ background: #e74c3c; color: white; }}
            .priority-high {{ border-left-color: #e74c3c !important; }}
            .priority-medium {{ border-left-color: #ffa726 !important; }}
            .priority-low {{ border-left-color: #66bb6a !important; }}
            .urgency-score {{ 
                background: #ffa726; 
                color: white; 
                padding: 4px 8px; 
                border-radius: 12px; 
                font-size: 0.8em; 
            }}
            .reply-preview {{ 
                background: #fff8e1; 
                padding: 15px; 
                margin: 10px 0; 
                border-radius: 5px; 
                border-left: 3px solid #ffa726; 
            }}
            .reply-preview h5 {{ 
                margin: 0 0 10px 0; 
                color: #ffa726; 
            }}
            .reply-tabs {{ margin-bottom: 10px; }}
            .tab-btn {{ 
                padding: 5px 12px; 
                border: 1px solid #ffa726; 
                background: white; 
                cursor: pointer; 
                margin-right: 5px; 
                border-radius: 3px; 
            }}
            .tab-btn.active {{ 
                background: #ffa726; 
                color: white; 
            }}
            .reply-content {{ display: none; }}
            .reply-content.active {{ display: block; }}
            .reply-text {{ 
                font-style: italic; 
                color: #495057; 
                line-height: 1.6; 
            }}
            .markdown-text {{ 
                width: 100%; 
                height: 200px; 
                border: 1px solid #ddd; 
                border-radius: 5px; 
                padding: 10px; 
                font-family: monospace; 
                resize: vertical; 
            }}
            .copy-btn, .copy-btn-quick, .copy-btn-preview, .select-btn {{ 
                background: #ffa726; 
                color: white; 
                border: none; 
                padding: 8px 12px; 
                border-radius: 20px; 
                cursor: pointer; 
                margin: 3px; 
                font-size: 0.85em;
                font-weight: bold;
                transition: all 0.3s ease;
                border: 2px solid #fff;
            }}
            .copy-btn:hover, .copy-btn-quick:hover, .copy-btn-preview:hover, .select-btn:hover {{ 
                background: #ff9800; 
                transform: translateY(-1px);
                box-shadow: 0 2px 8px rgba(255, 167, 38, 0.4);
            }}
            .copy-btn-quick {{ 
                background: #1976d2; 
                font-size: 0.9em;
                padding: 6px 15px;
            }}
            .copy-btn-quick:hover {{ 
                background: #1565c0; 
            }}
            .copy-actions {{ 
                margin-top: 10px; 
                text-align: center; 
                padding: 10px;
                background: #f8f9fa;
                border-radius: 8px;
            }}
            .copy-hint {{ 
                display: block; 
                margin-top: 8px; 
                color: #666; 
                font-style: italic; 
            }}
            .markdown-text {{ 
                width: 100%; 
                height: 200px; 
                border: 2px solid #e3f2fd; 
                border-radius: 8px; 
                padding: 15px; 
                font-family: 'Courier New', monospace; 
                resize: vertical; 
                font-size: 14px;
                line-height: 1.5;
            }}
            .markdown-text:focus {{ 
                border-color: #1976d2; 
                outline: none;
                box-shadow: 0 0 5px rgba(25, 118, 210, 0.3);
            }}
            .copy-success-alert {{
                position: fixed;
                top: 20px;
                right: 20px;
                background: #4caf50;
                color: white;
                padding: 15px 20px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                z-index: 1000;
                font-weight: bold;
            }}
        </style>
        <script>
            function showReplyTab(emailId, tabType) {{
                // Hide all reply tabs for this email
                document.querySelectorAll(`#reply-preview-${{emailId}}, #reply-markdown-${{emailId}}`).forEach(el => el.classList.remove('active'));
                document.querySelectorAll(`#reply-preview-${{emailId}} .tab-btn, #reply-markdown-${{emailId}} .tab-btn`).forEach(el => el.classList.remove('active'));
                
                // Show selected tab
                document.getElementById(`reply-${{tabType}}-${{emailId}}`).classList.add('active');
                event.target.classList.add('active');
            }}
            
            async function copyToClipboard(emailId) {{
                // „ÇØ„Ç§„ÉÉ„ÇØ„Ç≥„Éî„ÉºÔºö„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„ÉÜ„Ç≠„Çπ„Éà„Çí„Ç≥„Éî„Éº
                const textarea = document.querySelector(`#markdown-textarea-${{emailId}}`);
                await copyTextToClipboard(textarea.value, '„É°„Éº„É´ËçâÊ°à„Çí„Ç≥„Éî„Éº„Åó„Åæ„Åó„ÅüÔºÅüìã');
            }}
            
            async function copyFromTextarea(emailId) {{
                // „ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„Åã„Çâ„Ç≥„Éî„Éº
                const textarea = document.querySelector(`#markdown-textarea-${{emailId}}`);
                await copyTextToClipboard(textarea.value, '„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„ÉÜ„Ç≠„Çπ„Éà„Çí„Ç≥„Éî„Éº„Åó„Åæ„Åó„ÅüÔºÅüìù');
            }}
            
            async function copyReplyText(emailId) {{
                // „Éó„É¨„Éì„É•„Éº„ÉÜ„Ç≠„Çπ„Éà„Åã„Çâ„Ç≥„Éî„ÉºÔºàHTML„Çø„Ç∞„ÇíÈô§ÂéªÔºâ
                const replyDiv = document.querySelector(`#reply-preview-${{emailId}} .reply-text`);
                const plainText = replyDiv.innerText || replyDiv.textContent;
                await copyTextToClipboard(plainText, '„Éó„É¨„Éì„É•„ÉºÂÜÖÂÆπ„Çí„Ç≥„Éî„Éº„Åó„Åæ„Åó„ÅüÔºÅüëÅÔ∏è');
            }}
            
            async function copyTextToClipboard(text, successMessage) {{
                try {{
                    await navigator.clipboard.writeText(text);
                    showCopySuccess(successMessage);
                }} catch (err) {{
                    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºöÂè§„ÅÑ„Éñ„É©„Ç¶„Ç∂ÂØæÂøú
                    const tempTextarea = document.createElement('textarea');
                    tempTextarea.value = text;
                    document.body.appendChild(tempTextarea);
                    tempTextarea.select();
                    document.execCommand('copy');
                    document.body.removeChild(tempTextarea);
                    showCopySuccess(successMessage);
                }}
            }}
            
            function selectAllText(emailId) {{
                const textarea = document.querySelector(`#markdown-textarea-${{emailId}}`);
                textarea.select();
                textarea.setSelectionRange(0, 99999); // „É¢„Éê„Ç§„É´ÂØæÂøú
                showCopySuccess('„ÉÜ„Ç≠„Çπ„Éà„ÇíÂÖ®ÈÅ∏Êäû„Åó„Åæ„Åó„ÅüÔºÅüî§ Ctrl+C „Åß„Ç≥„Éî„Éº„Åß„Åç„Åæ„Åô');
            }}
            
            function showCopySuccess(message) {{
                // ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
                const existingAlert = document.querySelector('.copy-success-alert');
                if (existingAlert) {{
                    existingAlert.remove();
                }}
                
                const alert = document.createElement('div');
                alert.className = 'copy-success-alert';
                alert.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: #4caf50;
                    color: white;
                    padding: 15px 20px;
                    border-radius: 8px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                    z-index: 1000;
                    font-weight: bold;
                    animation: slideIn 0.3s ease;
                `;
                alert.textContent = message;
                
                // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Áî®CSS
                const style = document.createElement('style');
                style.textContent = `
                    @keyframes slideIn {{
                        from {{ transform: translateX(100%); opacity: 0; }}
                        to {{ transform: translateX(0); opacity: 1; }}
                    }}
                `;
                document.head.appendChild(style);
                
                document.body.appendChild(alert);
                
                // 3ÁßíÂæå„Å´Ëá™Âãï„ÅßÊ∂àÂéª
                setTimeout(() => {{
                    if (alert.parentNode) {{
                        alert.style.animation = 'slideIn 0.3s ease reverse';
                        setTimeout(() => alert.remove(), 300);
                    }}
                }}, 3000);
            }}
            
            async function markCompleted(emailId) {{
                try {{
                    const response = await fetch(`/emails/${{emailId}}/complete`, {{ method: 'POST' }});
                    const result = await response.json();
                    
                    if (result.success) {{
                        location.reload();
                    }} else {{
                        alert('„Ç®„É©„Éº: ' + result.error);
                    }}
                }} catch (error) {{
                    alert('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ' + error.message);
                }}
            }}
            
            async function deleteEmail(emailId) {{
                if (confirm('„Åì„ÅÆ„É°„Éº„É´„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) {{
                    try {{
                        const response = await fetch(`/emails/${{emailId}}/delete`, {{ method: 'DELETE' }});
                        const result = await response.json();
                        
                        if (result.success) {{
                            location.reload();
                        }} else {{
                            alert('„Ç®„É©„Éº: ' + result.error);
                        }}
                    }} catch (error) {{
                        alert('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ' + error.message);
                    }}
                }}
            }}
        </script>
    </head>
    <body>
        <div class="container priority-{priority_level}">
            <div class="header">
                <a href="/" class="back-btn">‚Üê „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</a>
                <h2 style="color: #1565c0;">
                    <span class="priority-badge">{priority_jp}ÂÑ™ÂÖàÂ∫¶</span>
                    „É°„Éº„É´ ({len(emails)}‰ª∂)
                </h2>
            </div>
            
            {_generate_email_cards(emails) if emails else '<div class="email-card"><div class="email-header"><p>üì≠ Ë©≤ÂΩì„Åô„Çã„É°„Éº„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p></div></div>'}
        </div>
    </body>
    </html>
    """
    return html_content

@app.get("/completed", response_class=HTMLResponse)
async def completed_emails():
    """ÂÆå‰∫ÜÊ∏à„Åø„É°„Éº„É´Ë°®Á§∫"""
    emails = bot.db.get_emails_by_category(status='completed', limit=50)
    
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>ÂÆå‰∫ÜÊ∏à„Åø„É°„Éº„É´ - ProfMail</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            body {{ 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                margin: 0; 
                padding: 20px; 
                background: linear-gradient(135deg, #e3f2fd 0%, #ffffff 50%, #fff9c4 100%);
            }}
            .container {{ max-width: 1200px; margin: 0 auto; }}
            .header {{ 
                background: white; 
                padding: 20px; 
                border-radius: 10px; 
                margin-bottom: 20px; 
                box-shadow: 0 4px 20px rgba(21, 101, 192, 0.1);
                border: 2px solid #ffd54f;
            }}
            .back-btn {{ 
                background: #1976d2; 
                color: white; 
                padding: 8px 16px; 
                border: none; 
                border-radius: 20px; 
                text-decoration: none; 
                margin-right: 10px;
                border: 2px solid #ffd54f;
            }}
            .email-table {{ 
                background: white; 
                border-radius: 10px; 
                overflow: hidden; 
                box-shadow: 0 4px 20px rgba(21, 101, 192, 0.1);
                border: 1px solid #e3f2fd;
            }}
            .email-table table {{ width: 100%; border-collapse: collapse; }}
            .email-table th {{ 
                background: #66bb6a; 
                color: white; 
                padding: 15px; 
                text-align: left; 
            }}
            .email-table td {{ 
                padding: 15px; 
                border-bottom: 1px solid #e3f2fd; 
            }}
            .email-table tr:hover {{ background: #f8f9fa; }}
            .completed-item {{ 
                background: #e8f5e8; 
                opacity: 0.8; 
            }}
            .btn {{ 
                padding: 5px 10px; 
                margin: 2px; 
                border: none; 
                border-radius: 3px; 
                cursor: pointer; 
                text-decoration: none; 
                font-size: 0.8em; 
            }}
            .btn-primary {{ background: #1976d2; color: white; }}
            .btn-success {{ background: #66bb6a; color: white; }}
            .category-badge {{ 
                background: #66bb6a; 
                color: white; 
                padding: 3px 8px; 
                border-radius: 10px; 
                font-size: 0.7em; 
            }}
            .completed-badge {{ 
                background: #4caf50; 
                color: white; 
                padding: 2px 6px; 
                border-radius: 8px; 
                font-size: 0.7em; 
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <a href="/" class="back-btn">‚Üê „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</a>
                <h2 style="color: #1565c0;">‚úÖ ÂÆå‰∫ÜÊ∏à„Åø„É°„Éº„É´ ({len(emails)}‰ª∂)</h2>
            </div>
            
            <div class="email-table">
                <table>
                    <thead>
                        <tr>
                            <th>‰ª∂Âêç</th>
                            <th>ÈÄÅ‰ø°ËÄÖ</th>
                            <th>„Ç´„ÉÜ„Ç¥„É™</th>
                            <th>ÂÆå‰∫ÜÊó•ÊôÇ</th>
                            <th>„Ç¢„ÇØ„Ç∑„Éß„É≥</th>
                        </tr>
                    </thead>
                    <tbody>
                        {_generate_completed_email_rows(emails)}
                    </tbody>
                </table>
            </div>
        </div>
    </body>
    </html>
    """
    return html_content

@app.get("/category/{category_name}", response_class=HTMLResponse)
async def category_view(category_name: str):
    """„Ç´„ÉÜ„Ç¥„É™Âà•„É°„Éº„É´Ë°®Á§∫"""
    pending_emails = bot.db.get_emails_by_category(category_name, status='pending', limit=20)
    completed_emails = bot.db.get_emails_by_category(category_name, status='completed', limit=10)
    
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>{category_name} - ProfMail</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            body {{ 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                margin: 0; 
                padding: 20px; 
                background: linear-gradient(135deg, #e3f2fd 0%, #ffffff 50%, #fff9c4 100%);
            }}
            .container {{ max-width: 1000px; margin: 0 auto; }}
            .header {{ 
                background: white; 
                padding: 20px; 
                border-radius: 10px; 
                margin-bottom: 20px; 
                box-shadow: 0 4px 20px rgba(21, 101, 192, 0.1);
                border: 2px solid #ffd54f;
            }}
            .back-btn {{ 
                background: #1976d2; 
                color: white; 
                padding: 8px 16px; 
                border: none; 
                border-radius: 20px; 
                text-decoration: none; 
                margin-right: 10px;
                border: 2px solid #ffd54f;
            }}
            .tabs {{ display: flex; margin-bottom: 20px; }}
            .tab {{ 
                padding: 12px 24px; 
                cursor: pointer; 
                border: 1px solid #ddd; 
                background: #f8f9fa; 
                margin-right: 5px; 
                border-radius: 5px 5px 0 0; 
            }}
            .tab.active {{ 
                background: #1976d2; 
                color: white; 
            }}
            .tab-content {{ display: none; }}
            .tab-content.active {{ display: block; }}
            .email-card {{ 
                background: white; 
                margin: 15px 0; 
                border-radius: 10px; 
                box-shadow: 0 4px 20px rgba(21, 101, 192, 0.1); 
                overflow: hidden;
                border: 1px solid #e3f2fd;
            }}
            .email-header {{ 
                padding: 20px; 
                border-left: 4px solid #1976d2; 
            }}
            .email-subject {{ 
                font-size: 1.2em; 
                font-weight: bold; 
                margin-bottom: 10px; 
                color: #1565c0; 
            }}
            .email-meta {{ 
                color: #7f8c8d; 
                font-size: 0.9em; 
                margin-bottom: 15px; 
            }}
            .email-summary {{ 
                color: #34495e; 
                margin-bottom: 15px; 
                padding: 10px; 
                background: #e3f2fd; 
                border-radius: 5px; 
            }}
            .email-actions {{ 
                padding: 0 20px 20px 20px; 
            }}
            .btn {{ 
                padding: 8px 16px; 
                margin: 5px; 
                border: none; 
                border-radius: 5px; 
                cursor: pointer; 
                text-decoration: none; 
                display: inline-block; 
            }}
            .btn-primary {{ background: #1976d2; color: white; }}
            .btn-success {{ background: #ffa726; color: white; }}
            .btn-danger {{ background: #e74c3c; color: white; }}
            .priority-high {{ border-left-color: #e74c3c !important; }}
            .priority-medium {{ border-left-color: #ffa726 !important; }}
            .priority-low {{ border-left-color: #66bb6a !important; }}
            .urgency-score {{ 
                background: #ffa726; 
                color: white; 
                padding: 4px 8px; 
                border-radius: 12px; 
                font-size: 0.8em; 
            }}
            .reply-preview {{ 
                background: #fff8e1; 
                padding: 15px; 
                margin: 10px 0; 
                border-radius: 5px; 
                border-left: 3px solid #ffa726; 
            }}
            .reply-preview h5 {{ 
                margin: 0 0 10px 0; 
                color: #ffa726; 
            }}
            .reply-tabs {{ margin-bottom: 10px; }}
            .tab-btn {{ 
                padding: 5px 12px; 
                border: 1px solid #ffa726; 
                background: white; 
                cursor: pointer; 
                margin-right: 5px; 
                border-radius: 3px; 
            }}
            .tab-btn.active {{ 
                background: #ffa726; 
                color: white; 
            }}
            .reply-content {{ display: none; }}
            .reply-content.active {{ display: block; }}
            .reply-text {{ 
                font-style: italic; 
                color: #495057; 
                line-height: 1.6; 
            }}
            .markdown-text {{ 
                width: 100%; 
                height: 200px; 
                border: 1px solid #ddd; 
                border-radius: 5px; 
                padding: 10px; 
                font-family: monospace; 
                resize: vertical; 
            }}
            .copy-btn {{ 
                background: #66bb6a; 
                color: white; 
                border: none; 
                padding: 5px 10px; 
                border-radius: 3px; 
                cursor: pointer; 
                margin-top: 5px; 
            }}
            .copy-btn:hover {{ background: #4caf50; }}
            .completed-item {{ 
                opacity: 0.7; 
                background: #e8f5e8; 
            }}
        </style>
        <script>
            function showTab(tabName) {{
                document.querySelectorAll('.tab-content').forEach(el => el.classList.remove('active'));
                document.querySelectorAll('.tab').forEach(el => el.classList.remove('active'));
                document.getElementById(tabName).classList.add('active');
                document.querySelector(`[onclick="showTab('${{tabName}}')"]`).classList.add('active');
            }}
            
            function showReplyTab(emailId, tabType) {{
                // Hide all reply tabs for this email
                document.querySelectorAll(`#reply-preview-${{emailId}}, #reply-markdown-${{emailId}}`).forEach(el => el.classList.remove('active'));
                document.querySelectorAll(`.tab-btn`).forEach(el => el.classList.remove('active'));
                
                // Show selected tab
                document.getElementById(`reply-${{tabType}}-${{emailId}}`).classList.add('active');
                event.target.classList.add('active');
            }}
            
            async function copyToClipboard(emailId) {{
                const textarea = document.querySelector(`#reply-markdown-${{emailId}} .markdown-text`);
                try {{
                    await navigator.clipboard.writeText(textarea.value);
                    const btn = event.target;
                    const originalText = btn.textContent;
                    btn.textContent = '‚úÖ „Ç≥„Éî„ÉºÊ∏à„Åø';
                    setTimeout(() => {{
                        btn.textContent = originalText;
                    }}, 2000);
                }} catch (err) {{
                    // Fallback for older browsers
                    textarea.select();
                    document.execCommand('copy');
                    alert('Ëøî‰ø°ËçâÊ°à„Çí„Ç≥„Éî„Éº„Åó„Åæ„Åó„Åü');
                }}
            }}
            
            async function markCompleted(emailId) {{
                try {{
                    const response = await fetch(`/emails/${{emailId}}/complete`, {{ method: 'POST' }});
                    const result = await response.json();
                    
                    if (result.success) {{
                        location.reload();
                    }} else {{
                        alert('„Ç®„É©„Éº: ' + result.error);
                    }}
                }} catch (error) {{
                    alert('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ' + error.message);
                }}
            }}
            
            async function deleteEmail(emailId) {{
                if (confirm('„Åì„ÅÆ„É°„Éº„É´„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) {{
                    try {{
                        const response = await fetch(`/emails/${{emailId}}/delete`, {{ method: 'DELETE' }});
                        const result = await response.json();
                        
                        if (result.success) {{
                            location.reload();
                        }} else {{
                            alert('„Ç®„É©„Éº: ' + result.error);
                        }}
                    }} catch (error) {{
                        alert('„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ' + error.message);
                    }}
                }}
            }}
        </script>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <a href="/" class="back-btn">‚Üê „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</a>
                <h2 style="color: #1565c0;">{category_name}</h2>
            </div>
            
            <div class="tabs">
                <div class="tab active" onclick="showTab('pending-tab')">Êú™ÂØæÂøú ({len(pending_emails)})</div>
                <div class="tab" onclick="showTab('completed-tab')">ÂÆå‰∫ÜÊ∏à„Åø ({len(completed_emails)})</div>
            </div>
            
            <div id="pending-tab" class="tab-content active">
                {_generate_email_cards(pending_emails) if pending_emails else '<div class="email-card"><div class="email-header"><p>üì≠ Êú™ÂØæÂøú„É°„Éº„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p></div></div>'}
            </div>
            
            <div id="completed-tab" class="tab-content">
                {_generate_email_cards(completed_emails) if completed_emails else '<div class="email-card"><div class="email-header"><p>üì≠ ÂÆå‰∫ÜÊ∏à„Åø„É°„Éº„É´„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p></div></div>'}
            </div>
        </div>
    </body>
    </html>
    """
    return html_content

@app.post("/process")
async def process_emails(days: int = 3):
    """„É°„Éº„É´Âá¶ÁêÜÂÆüË°å"""
    try:
        # „Éë„É©„É°„Éº„Çø„ÅßÊó•Êï∞„ÇíÊåáÂÆöÂèØËÉΩ
        processed_emails = bot.process_emails(days=days)
        bot.last_execution = datetime.now()
        bot.last_tasks = processed_emails
        
        # Ë©≥Á¥∞ÊÉÖÂ†±„ÇíËøî„Åô
        return {
            "success": True,
            "processed_count": len(processed_emails),
            "days_processed": days,
            "categories": {category: len([e for e in processed_emails if e.get('category') == category]) 
                         for category in set(e.get('category', '„Åù„ÅÆ‰ªñ') for e in processed_emails)},
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.post("/emails/{email_id}/complete")
async def mark_email_completed(email_id: str):
    """„É°„Éº„É´ÂÆå‰∫Ü„Éû„Éº„ÇØ"""
    try:
        success = bot.db.update_email_status(email_id, 'completed')
        return {"success": success}
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.delete("/emails/{email_id}/delete")
async def delete_email(email_id: str):
    """„É°„Éº„É´ÂâäÈô§"""
    try:
        success = bot.db.delete_email(email_id)
        return {"success": success}
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.get("/all", response_class=HTMLResponse)
async def all_emails():
    """„Åô„Åπ„Å¶„ÅÆ„É°„Éº„É´Ë°®Á§∫"""
    emails = bot.db.get_emails_by_category(status='pending', limit=50)
    
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>„Åô„Åπ„Å¶„ÅÆ„É°„Éº„É´ - ProfMail</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            body {{ 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                margin: 0; 
                padding: 20px; 
                background: linear-gradient(135deg, #e3f2fd 0%, #ffffff 50%, #fff9c4 100%);
            }}
            .container {{ max-width: 1200px; margin: 0 auto; }}
            .header {{ 
                background: white; 
                padding: 20px; 
                border-radius: 10px; 
                margin-bottom: 20px; 
                box-shadow: 0 4px 20px rgba(21, 101, 192, 0.1);
                border: 2px solid #ffd54f;
            }}
            .back-btn {{ 
                background: #1976d2; 
                color: white; 
                padding: 8px 16px; 
                border: none; 
                border-radius: 20px; 
                text-decoration: none; 
                margin-right: 10px;
                border: 2px solid #ffd54f;
            }}
            .email-table {{ 
                background: white; 
                border-radius: 10px; 
                overflow: hidden; 
                box-shadow: 0 4px 20px rgba(21, 101, 192, 0.1);
                border: 1px solid #e3f2fd;
            }}
            .email-table table {{ width: 100%; border-collapse: collapse; }}
            .email-table th {{ 
                background: #1976d2; 
                color: white; 
                padding: 15px; 
                text-align: left; 
            }}
            .email-table td {{ 
                padding: 15px; 
                border-bottom: 1px solid #e3f2fd; 
            }}
            .email-table tr:hover {{ background: #f8f9fa; }}
            .priority-high {{ background: #ffebee; }}
            .priority-medium {{ background: #fff8e1; }}
            .priority-low {{ background: #e8f5e8; }}
            .btn {{ 
                padding: 5px 10px; 
                margin: 2px; 
                border: none; 
                border-radius: 3px; 
                cursor: pointer; 
                text-decoration: none; 
                font-size: 0.8em; 
            }}
            .btn-primary {{ background: #1976d2; color: white; }}
            .btn-success {{ background: #ffa726; color: white; }}
            .btn-danger {{ background: #e74c3c; color: white; }}
            .category-badge {{ 
                background: #1976d2; 
                color: white; 
                padding: 3px 8px; 
                border-radius: 10px; 
                font-size: 0.7em; 
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <a href="/" class="back-btn">‚Üê „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ</a>
                <h2 style="color: #1565c0;">üìã „Åô„Åπ„Å¶„ÅÆ„É°„Éº„É´ ({len(emails)}‰ª∂)</h2>
            </div>
            
            <div class="email-table">
                <table>
                    <thead>
                        <tr>
                            <th>‰ª∂Âêç</th>
                            <th>ÈÄÅ‰ø°ËÄÖ</th>
                            <th>„Ç´„ÉÜ„Ç¥„É™</th>
                            <th>ÂÑ™ÂÖàÂ∫¶</th>
                            <th>Á∑äÊÄ•Â∫¶</th>
                            <th>„Ç¢„ÇØ„Ç∑„Éß„É≥</th>
                        </tr>
                    </thead>
                    <tbody>
                        {_generate_email_table_rows(emails)}
                    </tbody>
                </table>
            </div>
        </div>
    </body>
    </html>
    """
    return html_content

@app.get("/debug/emails")
async def debug_emails():
    """„Éá„Éê„ÉÉ„Ç∞: ÂÆüÈöõ„Å´ÂèñÂæó„Åï„Çå„Çã„É°„Éº„É´‰∏ÄË¶ß"""
    try:
        emails = bot.get_recent_emails(days=7, max_emails=10)  # 7Êó•Èñì„ÄÅÊúÄÂ§ß10‰ª∂
        
        email_list = []
        for email in emails:
            email_list.append({
                "subject": email['subject'],
                "sender": email['sender'],
                "date": email['date'],
                "body_preview": email['body'][:200] + "..." if len(email['body']) > 200 else email['body']
            })
        
        return {
            "message": "Áõ¥Ëøë7Êó•Èñì„ÅßÂèñÂæó„Åï„Çå„Çã„É°„Éº„É´‰∏ÄË¶ß",
            "count": len(emails),
            "emails": email_list
        }
    except Exception as e:
        return {"error": str(e)}

@app.get("/debug/db")
async def debug_database():
    """„Éá„Éº„Çø„Éô„Éº„ÇπÊßãÈÄ†„Éá„Éê„ÉÉ„Ç∞"""
    try:
        conn = sqlite3.connect(bot.db.db_path)
        cursor = conn.cursor()
        
        # „ÉÜ„Éº„Éñ„É´ÊßãÈÄ†Á¢∫Ë™ç
        cursor.execute("PRAGMA table_info(emails)")
        table_info = cursor.fetchall()
        
        # „Çµ„É≥„Éó„É´„Éá„Éº„ÇøÁ¢∫Ë™ç
        cursor.execute("SELECT * FROM emails LIMIT 1")
        sample_data = cursor.fetchone()
        
        conn.close()
        
        return {
            "table_structure": table_info,
            "sample_data": sample_data,
            "db_path": bot.db.db_path
        }
    except Exception as e:
        return {"error": str(e)}

@app.get("/health")
async def health_check():
    """„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "3.0.0 - Professor Edition"
    }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)